@c uuid.texiinc --
@c
@c Copyright (c) 2004-2006 Ralf S. Engelschall <rse@engelschall.com>
@c Copyright (c) 2004-2006 The OSSP Project <http://www.ossp.org/>
@c
@c Texinfo translation by Marco Maggi <marcomaggi@gna.org>
@c
@c Permission to use, copy, modify, and distribute this software for any
@c purpose  with or  without fee  is hereby  granted, provided  that the
@c above  copyright notice  and  this permission  notice  appear in  all
@c copies.
@c
@c THIS  SOFTWARE IS  PROVIDED ``AS  IS'' AND  ANY EXPRESSED  OR IMPLIED
@c WARRANTIES, INCLUDING, BUT NOT  LIMITED TO, THE IMPLIED WARRANTIES OF
@c MERCHANTABILITY AND FITNESS FOR  A PARTICULAR PURPOSE ARE DISCLAIMED.
@c IN  NO  EVENT SHALL  THE  AUTHORS  AND  COPYRIGHT HOLDERS  AND  THEIR
@c CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
@c EXEMPLARY, OR  CONSEQUENTIAL DAMAGES (INCLUDING, BUT  NOT LIMITED TO,
@c PROCUREMENT OF  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE,  DATA, OR
@c PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY
@c OF  LIABILITY,  WHETHER  IN   CONTRACT,  STRICT  LIABILITY,  OR  TORT
@c (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
@c OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


@node uuid
@appendix The original manual page of @uuid{} version 1.4.2


@unmacro ossp
@macro ossp{}
@acronym{OSSP}
@end macro

@unmacro uuid
@macro uuid{}
@acronym{UUID}
@end macro

@unmacro ascii
@macro ascii{}
@acronym{ASCII}
@end macro

@unmacro cfunction
@macro cfunction{NAME}
@code{\NAME\()}
@end macro


@menu
* uuid description::            Description.
* uuid api::                    Application programming interface.
* uuid also::                   See also.
* uuid history::                History.
@end menu


@noindent
@ossp{} @uuid{} --- Universally Unique Identifier 1.4.2 (13-Mar-2006).


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c ------------------------------------------------------------
@node uuid description
@section Description


@noindent
@ossp{} @uuid{} is a ISO-C:1999 application programming interface
(@api{}) and corresponding command line interface (@acronym{CLI}) for
the generation of DCE 1.1, ISO/IEC 11578:1996 and RFC 4122 compliant
@emph{Universally Unique Identifier} (@uuid{}).

It supports DCE 1.1 variant @uuid{}s of version 1 (time and node based),
version 3 (name based, MD5), version 4 (random number based) and version
5 (name based, SHA-1).  Additional @api{} bindings are provided for the
languages ISO-C++:1998, Perl:5 and PHP:4/5.  Optional backward
compatibility exists for the ISO-C DCE-1.1 and Perl Data::UUID @api{}s.

@uuid{}s are 128 bit numbers which are intended to have a high
likelihood of uniqueness over space and time and are computationally
difficult to guess.  They are globally unique identifiers which can be
locally generated without contacting a global registration authority.
@uuid{}s are intended as unique identifiers for both mass tagging
objects with an extremely short lifetime and to reliably identifying
very persistent objects across a network.

This is the @acronym{ISO}--C application programming interface (@api{})
of @ossp{} @uuid{}.


@subsection @uuid{} binary representation


@noindent
According to the DCE 1.1, ISO/IEC 11578:1996 and RFC 4122 standards, a
DCE 1.1 variant UUID is a 128 bit number defined out of 7 fields, each
field a multiple of an octet in size and stored in network byte order:

@example
 0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
0|                          time_low                             |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
1|       time_mid                |         time_hi_and_version   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
2|clk_seq_hi_res |  clk_seq_low  |         node (0-1)            |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
3|                         node (2-5)                            |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
@end example

An example of a @uuid{} binary representation is the octet stream
@code{0xEC 0xB9 0xF3 0x5F 0x44 0x2A 0x11 0xD8 0x8A 0x24 0x00 0x90 0x27
0x2F 0xF7 0x25}.  The binary representation format is exactly what the
@ossp{} @uuid{} @api{} functions @cfunction{uuid_import} and
@cfunction{uuid_export} deal with under @code{UUID_FMT_BIN}.


@subsection @uuid{} @ascii{} string representation


@noindent
According to the DCE 1.1, ISO/IEC 11578:1996 and RFC 4122 standards, a
DCE 1.1 variant @uuid{} is represented as an @ascii{} string consisting
of 8 hexadecimal digits followed by a hyphen, then three groups of 4
hexadecimal digits each followed by a hyphen, then 12 hexadecimal
digits.  Formally, the string representation is defined by the following
grammar:

@example
uuid                   = <time_low> "-" <time_mid> "-"
                         <time_high_and_version> "-"
                         <clock_seq_and_reserved>
                         <clock_seq_low> "-" <node>
time_low               = 4*<hex_octet>
time_mid               = 2*<hex_octet>
time_high_and_version  = 2*<hex_octet>
clock_seq_and_reserved = <hex_octet>
clock_seq_low          = <hex_octet>
node                   = 6*<hex_octet>
hex_octet              = <hex_digit> <hex_digit>
hex_digit              = "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"
                            |"a"|"b"|"c"|"d"|"e"|"f"
                            |"A"|"B"|"C"|"D"|"E"|"F"
@end example

An example of a @uuid{} string representation is the @ascii{} string
@code{54531d28-402b-11d8-af12-0002a5094c23}.  The string representation
format is exactly what the @ossp{} @uuid{} @api{} functions
@cfunction{uuid_import} and @cfunction{uuid_export} deal with under
@code{UUID_FMT_STR}.


@subsection @uuid{} variants and versions


@noindent
A @uuid{} has a variant and version.  The variant defines the layout of
the @uuid{}.  The version defines the content of the @uuid{}.  The
@uuid{} variant supported in @ossp{} @uuid{} is the DCE 1.1 variant
only.  The DCE 1.1 @uuid{} variant versions supported in @ossp{}
uuuuiidd are:

@table @asis
@item @emph{Version 1} (time and node based)
These are the classical @uuid{}s, created out of a 60--bit system time,
a 14--bit local clock sequence and 48--bit system @acronym{MAC} address.
The @acronym{MAC} address can be either the real one of a physical
network interface card (@acronym{NIC}) or a random multi--cast
@acronym{MAC} address.  Version 1 @uuid{}s are usually used as one--time
global unique identifiers.

@item @emph{Version 3} (name based, @acronym{MD5})
These are @uuid{}s which are based on the 128--bit @acronym{MD5} message
digest of the concatenation of a 128--bit namespace @uuid{} and a name
string of arbitrary length.  Version 3 @uuid{}s are usually used for
non--unique but repeatable message digest identifiers.

@item @emph{Version 4} (random data based)
These are @uuid{}s which are based on just 128--bit of random data.
Version 4 @uuid{}s are usually used as one--time local unique
identifiers.

@item @emph{Version 5} (name based, @acronym{SHA}-1)
These are @uuid{}s which are based on the 160--bit @acronym{SHA}-1
message digest of the concatenation of a 128--bit namespace @uuid{} and
a name string of arbitrary length.  Version 5 @uuid{}s are usually used
for non--unique but repeatable message digest identifiers.
@end table


@subsection @uuid{} uniqueness


@noindent
Version 1 @uuid{}s are guaranteed to be unique through combinations of
hardware addresses, time stamps and random seeds.  There is a reference
in the @uuid{} to the hardware (@acronym{MAC}) address of the first
network interface card (@acronym{NIC}) on the host which generated the
@uuid{} --- this reference is intended to ensure the @uuid{} will be
unique in space as the @acronym{MAC} address of every network card is
assigned by a single global authority (@acronym{IEEE}) and is guaranteed
to be unique.

The next component in a @uuid{} is a timestamp which, as clock always
(should) move forward, will be unique in time.  Just in case some part
of the above goes wrong (the hardware address cannot be determined or
the clock moved steps backward), there is a random clock sequence
component placed into the @uuid{} as a catch--all for uniqueness.

Version 3 and version 5 @uuid{}s are guaranteed to be inherently
globally unique if the combination of namespace and name used to
generate them is unique.

Version 4 @uuid{}s are not guaranteed to be globally unique, because
they are generated out of locally gathered pseudo--random numbers only.
Nevertheless there is still a high likelihood of uniqueness over space
and time and that they are computationally difficult to guess.


@subsection Nil @uuid{}


@noindent
There is a special @emph{Nil} @uuid{} consisting of all octets set to
zero in the binary representation.  It can be used as a special @uuid{}
value which does not conflict with real @uuid{}s.


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c ------------------------------------------------------------
@node uuid api
@section Application programming interface


@noindent
The ISO-C Application Programming Interface (@api{}) of @ossp{} @uuid{}
consists of the following components.


@subsection Constants


@noindent
The following constants are provided:

@table @code
@item UUID_VERSION
The hexadecimal encoded @ossp{} @uuid{} version.  This allows
compile-time checking of the @ossp{} @uuid{} version.  For run--time
checking use @cfunction{uuid_version} instead.

The hexadecimal encoding for a version @code{$v.$r$t$l} is calculated
with the @gnu{} @code{shtool version} command and is (in Perl--style for
concise description):

@example
sprintf('0x%x%02x%d%02x', $_v, $_r, @{qw(s 9 . 2 b 1 a 0)@}->@{$_t@}, \
($_t eq 's' ? 99 : $_l))
@end example

@noindent
i.e., the version 0.9.6 is encoded as @code{0x009206}.

@item UUID_LEN_BIN
@itemx UUID_LEN_STR
The number of octets of the @uuid{} binary and string representations.
Notice that the lengths of the string representation does @strong{not}
include the necessary @code{NUL} termination character.

@item UUID_MAKE_V1
@itemx UUID_MAKE_V3
@itemx UUID_MAKE_V4
@itemx UUID_MAKE_V5
@itemx UUID_MAKE_MC
The @code{mode} bits for use with @cfunction{uuid_make}.  The
@code{UUID_MAKE_Vn} specify which @uuid{} version to generate.  The
@code{UUID_MAKE_MC} forces the use of a random multi--cast @acronym{MAC}
address instead of the real physical @acronym{MAC} address in version 1
@uuid{}s.

@item UUID_RC_OK
@itemx UUID_RC_ARG
@itemx UUID_RC_MEM
@itemx UUID_RC_SYS
@itemx UUID_RC_INT
@itemx UUID_RC_IMP
The possible numerical return--codes of @api{} functions.  The
@code{UUID_RC_OK} indicates success, the others indicate errors.  Use
@cfunction{uuid_error} to translate them into string versions.

@item UUID_FMT_BIN
@itemx UUID_FMT_STR
@itemx UUID_FMT_TXT
The @code{fmt} formats for use with @cfunction{uuid_impor} and
@cfunction{uuid_export}.  The @code{UUID_FMT_BIN} indicates the @uuid{}
binary representation (of length @code{UUID_LEN_BIN}), the
@code{UUID_FMT_STR} indicates the @uuid{} string representation (of
length @code{UUID_LEN_STR}) and the @code{UUID_FMT_TXT} indicates the
textual description (of arbitrary length) of a @uuid{}.
@end table


@subsection Functions


@deftypefun uuid_rc_t uuid_create (uuid_t * @var{uuid})
Create a new @uuid{} object and store a pointer to it in
@code{*@var{uuid}}.  A @uuid{} object consists of an internal
representation of a @uuid{}, the internal PRNG and MD5 generator
contexts, and cached @acronym{MAC} address and timestamp information.
The initial @uuid{} is the @emph{Nil} @uuid{}.
@end deftypefun


@deftypefun uuid_rc_t uuid_destroy (uuid_t * @var{uuid})
Destroy @uuid{} object @var{uuid}.
@end deftypefun


@deftypefun uuid_rc_t uuid_clone (const uuid_t * @var{uuid}, uuid_t ** @var{uuid_clone})
Clone @uuid{} object @var{uuid} and store new @uuid{} object in
@var{uuid_clone}.
@end deftypefun


@deftypefun uuid_rc_t uuid_isnil (const uuid_t * @var{uuid}, int * @var{result})
Checks whether the @uuid{} in @var{uuid} is the @emph{Nil} @uuid{}.  If
this is the case, it returns true in @code{*@var{result}}.  Else it
returns false in @code{*@var{result}}.
@end deftypefun


@deftypefun uuid_rc_t uuid_compare (const uuid_t * @var{uuid}, const uuid_t * @var{uuid2}, int * @var{result})
Compares the order of the two @uuid{}s in @var{uuid1} and @var{uuid2}
and returns the result in @code{*@var{result}}: @code{-1} if @var{uuid1}
is smaller than @var{uuid2}, @code{0} if @var{uuid1} is equal to
@var{uuid2} and @code{+1} if @var{uuid1} is greater than @var{uuid2}.
@end deftypefun


@deftypefun uuid_rc_t uuid_import (uuid_t * @var{uuid}, uuid_fmt_t @var{fmt}, const void * @var{data_ptr}, size_t @var{data_len})
Imports a @uuid{} @var{uuid} from an external representation of format
@var{fmt}.  The data is read from the buffer at @var{data_ptr} which
contains at least @var{data_len} bytes.

The format of the external representation is specified by @var{fmt} and
the minimum expected length in @var{data_len} depends on it.  Valid
values for @var{fmt} are @code{UUID_FMT_BIN} and @code{UUID_FMT_STR}.
@end deftypefun


@deftypefun uuid_rc_t uuid_export (const uuid_t * @var{uuid}, uuid_fmt_t @var{fmt}, void ** @var{data_ptr}, size_t * @var{data_len})
Exports a @uuid{} @var{uuid} into an external representation of format
@var{fmt}.  The data is written to the buffer at @code{*@var{data_ptr}}
which has to be room for at least @code{*@var{data_len}} bytes.

If @code{*@var{data_ptr}} is @code{NULL}, @var{data_len} is ignored as
input and a new buffer is allocated and returned in
@code{*@var{data_ptr}} (the caller has to @cfunction{free} it later on).
If @var{data_len} is not @code{NULL}, the number of available bytes at
@code{*@var{data_ptr}} has to be provided in @code{*@var{data_len}} and
the number of actually written bytes is returned in
@code{*@var{data_len}} again.

The format of the external representation is specified by @var{fmt} and
the minimum required length in @code{*@var{data_len}} depends on it.
Valid values for @var{fmt} are @code{UUID_FMT_BIN}, @code{UUID_FMT_STR}
and @code{UUID_FMT_TXT}.
@end deftypefun


@deftypefun uuid_rc_t uuid_load (uuid_t * @var{uuid}, const char * @var{name})
Loads a predefined @uuid{} value into the @uuid{} object @var{uuid}.
The following @var{name} arguments are currently known:

@multitable {ns:X500} {6ba7b814-9dad-11d1-80b4-00c04fd430c8}
@item @emph{name} @tab @emph{@uuid{}}
@item nil       @tab 00000000-0000-0000-0000-000000000000
@item ns:DNS    @tab 6ba7b810-9dad-11d1-80b4-00c04fd430c8
@item ns:URL    @tab 6ba7b811-9dad-11d1-80b4-00c04fd430c8
@item ns:OID    @tab 6ba7b812-9dad-11d1-80b4-00c04fd430c8
@item ns:X500   @tab 6ba7b814-9dad-11d1-80b4-00c04fd430c8
@end multitable

The @code{ns:XXX} are names of predefined namespace @uuid{}s for use in
the generation of DCE 1.1 version 3 and version 5 @uuid{}s.
@end deftypefun


@deftypefun uuid_rc_t uuid_make (uuid_t * @var{uuid}, unsigned int @var{mode}, ...)
Generates a new @uuid{} in @var{uuid} according to @var{mode} and
optional arguments (dependent on @var{mode}).

If @var{mode} contains the @code{UUID_MAKE_V1} bit, a DCE 1.1 variant
@uuid{} of version 1 is generated.  Then optionally the bit
@code{UUID_MAKE_MC} forces the use of random multicast @acronym{MAC}
address instead of the real physical @acronym{MAC} address (the
default).  The @uuid{} is generated out of the 60--bit current system
time, a 12--bit clock sequence and the 48--bit @acronym{MAC} address.

If @var{mode} contains the @code{UUID_MAKE_V3} or @code{UUID_MAKE_V5}
bit, a DCE 1.1 variant @uuid{} of version 3 or 5 is generated and two
additional arguments are expected: first, a namespace @uuid{} object
(@code{uuid_t *}).  Second, a name string of arbitrary length
(@code{const char *}).  The @uuid{} is generated out of the 128--bit
@acronym{MD5} or 160--bit @acronym{SHA}--1 from the concatenated octet
stream of namespace @uuid{} and name string.

If @var{mode} contains the @code{UUID_MAKE_V4} bit, a DCE 1.1 variant
@uuid{} of version 4 is generated.  The @uuid{} is generated out of
128--bit random data.
@end deftypefun


@deftypefun {char *} uuid_error (uuid_rc_t @var{rc})
Returns a constant string representation corresponding to the
return--code @var{rc} for use in displaying @ossp{} @uuid{} errors.
@end deftypefun


@deftypefun {unsigned long} uuid_version (void)
Returns the hexadecimal encoded @ossp{} @uuid{} version as compiled into
the library object files.  This allows run--time checking of the @ossp{}
@uuid{} version.  For compile--time checking use @code{UUID_VERSION}
instead.
@end deftypefun


@subsection Example


@noindent
The following shows an example usage of the @api{}.  Error handling is
omitted for code simplification and has to be re--added for production
code.

@example
/* generate a DCE 1.1 v1 UUID from system environment */
char *
uuid_v1 (void)
@{
  uuid_t *uuid;
  char *str;

  uuid_create(&uuid);
  uuid_make(uuid, UUID_MAKE_V1);
  str = NULL;
  uuid_export(uuid, UUID_FMT_STR, (void **)&str, NULL);
  uuid_destroy(uuid);
  return str;
@}

/* generate a DCE 1.1 v3 UUID from an URL */
char *
uuid_v3 (const char *url)
@{
  uuid_t *uuid;
  uuid_t *uuid_ns;
  char *str;

  uuid_create(&uuid);
  uuid_create(&uuid_ns);
  uuid_load(uuid_ns, "ns:URL");
  uuid_make(uuid, UUID_MAKE_V3, uuid_ns, url);
  str = NULL;
  uuid_export(uuid, UUID_FMT_STR, (void **)&str, NULL);
  uuid_destroy(uuid_ns);
  uuid_destroy(uuid);
  return str;
@}
@end example


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c ------------------------------------------------------------
@node uuid also
@section See also


@noindent
The following are references to @uuid{} documentation and
specifications:

@noindent
@emph{A Universally Unique IDentifier (UUID) URN Namespace}, P. Leach,
M. Mealling, R. Salz, IETF Request for Comments: RFC 4122, July 2005, 32
pages, @url{http://www.ietf.org/rfc/rfc4122.txt}.

@noindent
@emph{DCE1.1: Remote Procedure Call}, appendix @emph{Universally Unique
Identifier}, Open Group Technical Standard Document Number C706, August
1997, 737 pages, (supersedes C309 DCE: Remote Procedure Call 8/1994,
which was basis for ISO/IEC 11578:1996 specification),
@url{http://www.opengroup.org/publications/catalog/c706.htm}.

@noindent
Information technology -- Open Systems Interconnection (OSI),
@emph{Remote Procedure Call (RPC)}, ISO/IEC 11578:1996, August 2001, 570
pages, (CHF 340,00), @url{http://www.iso.ch/cate/d2229.html}.

@noindent
Information technology -- Open Systems Interconnection (OSI),
@emph{Procedures for the operation of OSI Registration Authorities:
Generation and Registration of Universally Unique Identifiers (UUIDs)
and their Use as ASN.1 Object Identifier Components}, ISO/IEC
9834-8:2004 / ITU-T Rec. X.667, 2004, December 2004, 25 pages.

@noindent
@emph{HTTP Extensions for Distributed Authoring (WebDAV)}, section
@emph{6.4.1 Node Field Generation Without the IEEE 802 Address}, IETF
Request for Comments: RFC 2518, February 1999, 94 pages,
@url{http://www.ietf.org/rfc/rfc2518.txt}.

@noindent
@emph{DCE 1.1 compliant @uuid{} functions}, FreeBSD manual pages
@code{uuid(3)} and @code{uuidgen(2)},
@url{http://www.freebsd.org/cgi/man.cgi?query=uuid&manpath=FreeBSD+6.0-RELEASE}


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c ------------------------------------------------------------
@node uuid history
@section History


@noindent
@ossp{} @uuid{} was implemented in January 2004 by Ralf S.  Engelschall
@email{rse@@engelschall.com}.  It was prompted by the use of @uuid{}s in
the @ossp{} @acronym{AS} and @emph{OpenPKG} projects.  It is a clean
room implementation intended to be strictly standards compliant and
maximum portable.


@c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@c end of file
@c Local Variables:
@c mode: texinfo
@c page-separator: \"^@c -+$\"
@c End:
