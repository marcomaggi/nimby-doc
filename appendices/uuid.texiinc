@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@c @macro uuid{}
@c @acronym{UUID}
@c @end macro

@c @macro ossp{}
@c @acronym{OSSP}
@c @end macro

@macro dce{}
@acronym{DCE}
@end macro

@c @macro iso{}
@c @acronym{ISO}
@c @end macro

@c @macro ietf{}
@c @acronym{IETF}
@c @end macro

@macro iec{}
@acronym{IEC}
@end macro

@macro oid{}
@acronym{OID}
@end macro

@macro osi{}
@acronym{OSI}
@end macro

@c @macro cfunc{NAME}
@c @code{\NAME\()}
@c @end macro

@c @macro cnull{}
@c @code{NULL}
@c @end macro

@c page
@node uuid
@appendix The original manual page of @uuid{} version 1.6.2


@ossp{} @uuid{} --- Universally Unique Identifier 1.6.2 (4-Jul-2008).

@menu
* uuid description::            Description.
* uuid api::                    Application programming interface.
* uuid also::                   See also.
* uuid history::                History.
@end menu

@c page
@node uuid description
@appendixsec Description


@ossp{} @uuid{} is a ISO-C:1999 application programming interface
(@api{}) and corresponding command line interface (@acronym{CLI}) for
the generation of @dce{} 1.1, ISO/IEC 11578:1996 and RFC 4122 compliant
@emph{Universally Unique Identifier} (@uuid{}).

It supports @dce{} 1.1 variant @uuid{}s of version 1 (time and node
based), version 3 (name based, MD5), version 4 (random number based) and
version 5 (name based, SHA-1).  Additional @api{} bindings are provided
for the languages ISO-C++:1998, Perl:5 and PHP:4/5.  Optional backward
compatibility exists for the ISO-C @dce{}-1.1 and Perl Data::UUID
@api{}s.

@uuid{}s are 128 bit numbers which are intended to have a high
likelihood of uniqueness over space and time and are computationally
difficult to guess.  They are globally unique identifiers which can be
locally generated without contacting a global registration authority.
@uuid{}s are intended as unique identifiers for both mass tagging
objects with an extremely short lifetime and to reliably identifying
very persistent objects across a network.

This is the @iso{}--C application programming interface (@api{}) of
@ossp{} @uuid{}.

@c ------------------------------------------------------------

@subsubheading @uuid{} binary representation

According to the @dce{} 1.1, @iso{}/@iec{} 11578:1996 and @ietf{} @rfc{}
4122 standards, a @dce{} 1.1 variant @uuid{} is a 128 bit number defined
out of 7 fields, each field a multiple of an octet in size and stored in
network byte order:

@example
                                                  [4]
                                                 version
                                               -->|  |<--
                                                  |  |
                                                  |  |  [16]
              [32]                      [16]      |  |time_hi
            time_low                  time_mid    | _and_version
  |<---------------------------->||<------------>||<------------>|
  | MSB                          ||              ||  |           |
  | /                            ||              ||  |           |
  |/                             ||              ||  |           |
  +------++------++------++------++------++------++------++------+~~
  |  15  ||  14  ||  13  ||  12  ||  11  ||  10  |####9  ||   8  |
  | MSO  ||      ||      ||      ||      ||      |####   ||      |
  +------++------++------++------++------++------++------++------+~~
  7654321076543210765432107654321076543210765432107654321076543210

~~+------++------++------++------++------++------++------++------+
  ##* 7  ||   6  ||   5  ||   4  ||   3  ||   2  ||   1  ||   0  |
  ##*    ||      ||      ||      ||      ||      ||      ||  LSO |
~~+------++------++------++------++------++------++------++------+
  7654321076543210765432107654321076543210765432107654321076543210

  | |    ||      ||                                             /|
  | |    ||      ||                                            / |
  | |    ||      ||                                          LSB |
  |<---->||<---->||<-------------------------------------------->|
  |clk_seq clk_seq                      node
  |_hi_res _low                         [48]
  |[5-6]    [8]
  | |
->| |<--
variant
 [2-3]
@end example

An example of a @uuid{} binary representation is the octet stream
@samp{0xF8 0x1D 0x4F 0xAE 0x7D 0xEC 0x11 0xD0 0xA7 0x65 0x00 0xA0 0xC9
0x1E 0x6B 0xF6}.  The binary representation format is exactly what the
@ossp{} @uuid{} @api{} functions @cfunc{uuid_import} and
@cfunc{uuid_export} deal with under @code{UUID_FMT_BIN}.

@c ------------------------------------------------------------

@subsubheading @uuid{} @ascii{} string representation

According to the @dce{} 1.1, ISO/IEC 11578:1996 and @ietf{} @rfc{} 4122
standards, a @dce{} 1.1 variant @uuid{} is represented as an @ascii{}
string consisting of 8 hexadecimal digits followed by a hyphen, then
three groups of 4 hexadecimal digits each followed by a hyphen, then 12
hexadecimal digits.  Formally, the string representation is defined by
the following grammar:

@example
uuid                   = <time_low> "-"
                         <time_mid> "-"
                         <time_high_and_version> "-"
                         <clock_seq_and_reserved>
                         <clock_seq_low> "-"
                         <node>
time_low               = 4*<hex_octet>
time_mid               = 2*<hex_octet>
time_high_and_version  = 2*<hex_octet>
clock_seq_and_reserved = <hex_octet>
clock_seq_low          = <hex_octet>
node                   = 6*<hex_octet>
hex_octet              = <hex_digit> <hex_digit>
hex_digit              = "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"
                            |"a"|"b"|"c"|"d"|"e"|"f"
                            |"A"|"B"|"C"|"D"|"E"|"F"
@end example

An example of a @uuid{} string representation is the @ascii{} string
@samp{f81d4fae-7dec-11d0-a765-00a0c91e6bf6}.  The string representation
format is exactly what the @ossp{} @uuid{} @api{} functions
@cfunc{uuid_import} and @cfunc{uuid_export} deal with under
@code{UUID_FMT_STR}.

@strong{NOTE} A corresponding @aurl{} can be generated out of a @ascii{}
string representation of an @uuid{} by prefixing with @samp{urn:uuid:}
as in @samp{urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6}.

@c ------------------------------------------------------------

@subsubheading @uuid{} Single Integer Value Representation

According to the @iso{}/@iec{} 11578:1996 and @acronym{ITU-T} Rec. X.667
standards, a @dce{} 1.1 variant @uuid{} can be also represented as a
single integer value consisting of a decimal number with up to 39
digits.

An example of a @uuid{} single integer value representation is the
decimal number @samp{329800735698586629295641978511506172918}.  The
string representation format is exactly what the @ossp{} @uuid{} @api{}
functions @cfunc{uuid_import} and @cfunc{uuid_export} deal with under
@code{UUID_FMT_SIV}.

@strong{NOTE} A corresponding @iso{} @oid{} can be generated under the
@samp{@{joint-iso-itu-t(2) uuid(25)@}} arc out of a single integer value
representation of a @uuid{} by prefixing with @samp{2.25.}.  An example
@oid{} is @samp{2.25.329800735698586629295641978511506172918}.
Additionally, an @aurl{} can be generated by further prefixing with
@samp{urn:oid:} as in
@samp{urn:oid:2.25.329800735698586629295641978511506172918}.

@c ------------------------------------------------------------

@subsubheading @uuid{} variants and versions

A @uuid{} has a variant and version.  The variant defines the layout of
the @uuid{}.  The version defines the content of the @uuid{}.  The
@uuid{} variant supported in @ossp{} @uuid{} is the @dce{} 1.1
variant only.  The @dce{} 1.1 @uuid{} variant versions supported
in @ossp{} uuuuiidd are:

@table @asis
@item @emph{Version 1} (time and node based)
These are the classical @uuid{}s, created out of a 60--bit system time,
a 14--bit local clock sequence and 48--bit system @acronym{MAC} address.
The @acronym{MAC} address can be either the real one of a physical
network interface card (@acronym{NIC}) or a random multi--cast
@acronym{MAC} address.  Version 1 @uuid{}s are usually used as one--time
global unique identifiers.

@item @emph{Version 3} (name based, @acronym{MD5})
These are @uuid{}s which are based on the 128--bit @acronym{MD5} message
digest of the concatenation of a 128--bit namespace @uuid{} and a name
string of arbitrary length.  Version 3 @uuid{}s are usually used for
non--unique but repeatable message digest identifiers.

@item @emph{Version 4} (random data based)
These are @uuid{}s which are based on just 128--bit of random data.
Version 4 @uuid{}s are usually used as one--time local unique
identifiers.

@item @emph{Version 5} (name based, @acronym{SHA}-1)
These are @uuid{}s which are based on the 160--bit @acronym{SHA}-1
message digest of the concatenation of a 128--bit namespace @uuid{} and
a name string of arbitrary length.  Version 5 @uuid{}s are usually used
for non--unique but repeatable message digest identifiers.
@end table

@c ------------------------------------------------------------

@subsubheading @uuid{} uniqueness

Version 1 @uuid{}s are guaranteed to be unique through combinations of
hardware addresses, time stamps and random seeds.  There is a reference
in the @uuid{} to the hardware (@acronym{MAC}) address of the first
network interface card (@acronym{NIC}) on the host which generated the
@uuid{} --- this reference is intended to ensure the @uuid{} will be
unique in space as the @acronym{MAC} address of every network card is
assigned by a single global authority (@acronym{IEEE}) and is guaranteed
to be unique.

The next component in a @uuid{} is a timestamp which, as clock always
(should) move forward, will be unique in time.  Just in case some part
of the above goes wrong (the hardware address cannot be determined or
the clock moved steps backward), there is a random clock sequence
component placed into the @uuid{} as a catch--all for uniqueness.

Version 3 and version 5 @uuid{}s are guaranteed to be inherently
globally unique if the combination of namespace and name used to
generate them is unique.

Version 4 @uuid{}s are not guaranteed to be globally unique, because
they are generated out of locally gathered pseudo--random numbers only.
Nevertheless there is still a high likelihood of uniqueness over space
and time and that they are computationally difficult to guess.

@c ------------------------------------------------------------

@subsubheading Nil @uuid{}

There is a special @emph{Nil} @uuid{} consisting of all octets set to
zero in the binary representation.  It can be used as a special @uuid{}
value which does not conflict with real @uuid{}s.

@c page
@node uuid api
@appendixsec Application programming interface


The ISO-C Application Programming Interface (@api{}) of @ossp{} @uuid{}
consists of the following components.

@menu
* uuid api constants::          Constants.
* uuid api functions::          Functions.
* uuid api example::            Usage example.
@end menu

@c page
@node uuid api constants
@appendixsubsec Constants


The following constants are provided:

@table @code
@item UUID_VERSION
The hexadecimal encoded @ossp{} @uuid{} version.  This allows
compile-time checking of the @ossp{} @uuid{} version.  For run--time
checking use @cfunc{uuid_version} instead.

The hexadecimal encoding for a version @code{$v.$r$t$l} is calculated
with the @gnu{} @code{shtool version} command and is (in Perl--style for
concise description):

@example
sprintf('0x%x%02x%d%02x', $_v, $_r, \
        @{qw(s 9 . 2 b 1 a 0)@}->@{$_t@}, \
        ($_t eq 's' ? 99 : $_l))
@end example

@noindent
i.e., the version 0.9.6 is encoded as @code{0x009206}.

@item UUID_LEN_BIN
@itemx UUID_LEN_STR
@itemx UUID_LEN_SIV
The number of octets of the @uuid{} binary and string representations.
Notice that the lengths of the string representation
(@code{UUID_LEN_STR}) and the lengths of the single integer value
representation (@code{UUID_LEN_SIV}) does @strong{not} include the
necessary zero termination character.

@item UUID_MAKE_V1
@itemx UUID_MAKE_V3
@itemx UUID_MAKE_V4
@itemx UUID_MAKE_V5
@itemx UUID_MAKE_MC
The @code{mode} bits for use with @cfunc{uuid_make}.  The
@code{UUID_MAKE_Vn} specify which @uuid{} version to generate.  The
@code{UUID_MAKE_MC} forces the use of a random multi--cast @acronym{MAC}
address instead of the real physical @acronym{MAC} address in version 1
@uuid{}s.

@item UUID_RC_OK
@itemx UUID_RC_ARG
@itemx UUID_RC_MEM
@itemx UUID_RC_SYS
@itemx UUID_RC_INT
@itemx UUID_RC_IMP
The possible numerical return--codes of @api{} functions.  The
@code{UUID_RC_OK} indicates success, the others indicate errors.  Use
@cfunc{uuid_errr} to translate them into string versions.

@item UUID_FMT_BIN
@itemx UUID_FMT_STR
@itemx UUID_FMT_SIV
@itemx UUID_FMT_TXT
The @code{fmt} formats for use with @cfunc{uuid_import} and
@cfunc{uuid_export}.

@table @code
@item UUID_FMT_BIN
Indicates the @uuid{} binary representation of length
@code{UUID_LEN_BIN}.

@item UUID_FMT_STR
Indicates the @uuid{} string representation of length
@code{UUID_LEN_STR}.

@item UUID_FMT_SIV
Indicates the @uuid{} single integer value representation of maximum
length @code{UUID_LEN_SIV}.

@item UUID_FMT_TXT
Indicates the textual description (of arbitrary length) of a @uuid{}.
@end table
@end table

@c page
@node uuid api functions
@appendixsubsec Functions


@deftypefun uuid_rc_t uuid_create (uuid_t * @var{id})
Create a new @uuid{} object and store a pointer to it in
@code{*@var{id}}.  An @uuid{} object consists of an internal
representation of a @uuid{}, the internal PRNG and MD5 generator
contexts, and cached @acronym{MAC} address and timestamp information.
The initial @uuid{} is the @emph{Nil} @uuid{}.
@end deftypefun


@deftypefun uuid_rc_t uuid_destroy (uuid_t * @var{id})
Destroy @uuid{} object @var{id}.
@end deftypefun


@deftypefun uuid_rc_t uuid_clone (const uuid_t * @var{id}, uuid_t ** @var{id_clone})
Clone @uuid{} object @var{id} and store new @uuid{} object in
@var{id_clone}.
@end deftypefun


@deftypefun uuid_rc_t uuid_isnil (const uuid_t * @var{id}, int * @var{result})
Check whether the @uuid{} in @var{id} is the @emph{Nil} @uuid{}; if this
is the case, store true in @code{*@var{result}}; else store false in
@code{*@var{result}}.
@end deftypefun


@deftypefun uuid_rc_t uuid_compare (const uuid_t * @vari{id}, const uuid_t * @varii{id}, int * @var{result})
Compare the order of the two @uuid{}s in @vari{id} and @varii{id} and
return the result in @code{*@var{result}}: @code{-1} if @vari{id} is
smaller than @varii{id}, @code{0} if @vari{id} is equal to @varii{id}
and @code{+1} if @vari{id} is greater than @varii{id}.
@end deftypefun


@deftypefun uuid_rc_t uuid_import (uuid_t * @var{id}, uuid_fmt_t @var{fmt}, const void * @var{data_ptr}, size_t @var{data_len})
Import a @uuid{} @var{id} from an external representation of format
@var{fmt}.  The data is read from the buffer at @var{data_ptr} which
contains at least @var{data_len} bytes.

The format of the external representation is specified by @var{fmt} and
the minimum expected length in @var{data_len} depends on it.  Valid
values for @var{fmt} are @code{UUID_FMT_BIN}, @code{UUID_FMT_STR} and
@code{UUID_FMT_SIV}.
@end deftypefun


@deftypefun uuid_rc_t uuid_export (const uuid_t * @var{id}, uuid_fmt_t @var{fmt}, void ** @var{data_ptr}, size_t * @var{data_len})
Export a @uuid{} @var{id} into an external representation of format
@var{fmt}.  Valid values for @var{fmt} are @code{UUID_FMT_BIN},
@code{UUID_FMT_STR}, @code{UUID_FMT_SIV} and @code{UUID_FMT_TXT}.

The data is written to the buffer whose location is obtained by
dereferencing @var{data_ptr} after a ``cast'' to the appropriate
pointer--to--pointer type.  Hence the generic pointer argument
@var{data_ptr} is expected to be a pointer to a ``pointer of a
particular type'', i.e., it has to be of type @code{unsigned char **}
for @code{UUID_FMT_BIN} and @code{char **} for @code{UUID_FMT_STR},
@code{UUID_FMT_SIV} and @code{UUID_FMT_TXT}.

The buffer has to have room for at least @code{*@var{data_len}} bytes.
If the value of the pointer after ``casting'' and dereferencing
@var{data_ptr} is @cnull{}, @var{data_len} is ignored as input and a new
buffer is allocated and returned in the pointer after ``casting'' and
dereferencing @var{data_ptr} (the caller has to @cfunc{free} it later
on).

If @var{data_len} is not @cnull{}, the number of available bytes in the
buffer has to be provided in @code{*@var{data_len}} and the number of
actually written bytes is returned in @code{*@var{data_len}} again.

Notice that, when exporting in @code{UUID_FMT_STR} and
@code{UUID_FMT_TXT} format, the value stored in @code{*@var{data_len}}
includes the terminating zero for the @ascii{} coded string.

The minimum required buffer length depends on the external
representation as specified by @var{fmt} and is at least
@code{UUID_LEN_BIN} for @code{UUID_FMT_BIN}, @code{UUID_LEN_STR} for
@code{UUID_FMT_STR} and @code{UUID_LEN_SIV} for @code{UUID_FMT_SIV}.
For @code{UUID_FMT_TXT} a buffer of unspecified length is required and
hence it is recommended to allow @ossp{} @uuid{} to allocate the buffer
as necessary.
@end deftypefun


@deftypefun uuid_rc_t uuid_load (uuid_t * @var{id}, const char * @var{name})
Load a predefined @uuid{} value into the @uuid{} object @var{id}.  The
following @var{name} arguments are currently known (notice that the
@meta{time_low} field of the last four @uuid{} is different in the last
digit):

@multitable {ns:X500} {6ba7b814-9dad-11d1-80b4-00c04fd430c8}
@item Name @tab @uuid{}
@item nil       @tab 00000000-0000-0000-0000-000000000000
@item ns:DNS    @tab 6ba7b810-9dad-11d1-80b4-00c04fd430c8
@item ns:URL    @tab 6ba7b811-9dad-11d1-80b4-00c04fd430c8
@item ns:OID    @tab 6ba7b812-9dad-11d1-80b4-00c04fd430c8
@item ns:X500   @tab 6ba7b814-9dad-11d1-80b4-00c04fd430c8
@end multitable

The @code{ns:XXX} are names of predefined namespace @uuid{}s for use in
the generation of @dce{} 1.1 version 3 and version 5 @uuid{}s.
@end deftypefun


@deftypefun uuid_rc_t uuid_make (uuid_t * @var{id}, unsigned int @var{mode}, ...)
Generate a new @uuid{} in @var{id} according to @var{mode} and
optional arguments (dependent on @var{mode}).

If @var{mode} contains the @code{UUID_MAKE_V1} bit, a @dce{} 1.1
variant @uuid{} of version 1 is generated.  Then optionally the bit
@code{UUID_MAKE_MC} forces the use of random multicast @acronym{MAC}
address instead of the real physical @acronym{MAC} address (the
default).  The @uuid{} is generated out of the 60--bit current system
time, a 12--bit clock sequence and the 48--bit @acronym{MAC} address.

If @var{mode} contains the @code{UUID_MAKE_V3} or @code{UUID_MAKE_V5}
bit, a @dce{} 1.1 variant @uuid{} of version 3 or 5 is generated and two
additional arguments are expected: a namespace @uuid{} object
(@code{uuid_t *}) and a name string of arbitrary length (@code{const
char *}).  The @uuid{} is generated out of the 128--bit @acronym{MD5} or
160--bit @acronym{SHA}--1 from the concatenated octet stream of
namespace @uuid{} and name string.

If @var{mode} contains the @code{UUID_MAKE_V4} bit, a @dce{} 1.1
variant @uuid{} of version 4 is generated.  The @uuid{} is generated out
of 128--bit random data.
@end deftypefun


@deftypefun {char *} uuid_error (uuid_rc_t @var{rc})
Return a constant string representation corresponding to the
return--code @var{rc} for use in displaying @ossp{} @uuid{} errors.
@end deftypefun


@deftypefun {unsigned long} uuid_version (void)
Return the hexadecimal encoded @ossp{} @uuid{} version as compiled into
the library object files.  This allows run--time checking of the @ossp{}
@uuid{} version.  For compile--time checking use @code{UUID_VERSION}
instead.
@end deftypefun

@c page
@node uuid api example
@appendixsubsec Usage example


The following shows an example usage of the @api{}.  Error handling is
omitted for code simplification and has to be re--added for production
code.

@example
/* generate a DCE 1.1 v1 UUID from system environment */
char *uuid_v1(void)
@{
  uuid_t *uuid;
  char *str;

  uuid_create(&uuid);
  uuid_make(uuid, UUID_MAKE_V1);
  str = NULL;
  uuid_export(uuid, UUID_FMT_STR, &str, NULL);
  uuid_destroy(uuid);
  return str;
@}

/* generate a DCE 1.1 v3 UUID from an URL */
char *uuid_v3(const char *url)
@{
  uuid_t *uuid;
  uuid_t *uuid_ns;
  char *str;

  uuid_create(&uuid);
  uuid_create(&uuid_ns);
  uuid_load(uuid_ns, "ns:URL");
  uuid_make(uuid, UUID_MAKE_V3, uuid_ns, url);
  str = NULL;
  uuid_export(uuid, UUID_FMT_STR, &str, NULL);
  uuid_destroy(uuid_ns);
  uuid_destroy(uuid);
  return str;
@}
@end example

@c page
@node uuid also
@appendixsec See also


The following are references to @uuid{} documentation and
specifications:

@noindent
@emph{A Universally Unique IDentifier (@uuid{}) @acronym{URN}
Namespace}, P. Leach, M. Mealling, R. Salz, @ietf{} @rfc{} 4122, July
2005, 32 pages, @url{http://www.ietf.org/rfc/rfc4122.txt}.

@noindent
Information Technology --- Open Systems Interconnection (@osi{}),
Procedures for the operation of @osi{} Registration Authorities:
Generation and Registration of Universally Unique Identifiers (@uuid{}s)
and their Use as ASN.1 Object Identifier Components, @iso{}/@iec{}
9834-8:2004 / @acronym{ITU-T} Rec. X.667, 2004, December 2004, 25 pages,
@url{http://www.itu.int/ITU-T/studygroups/com17/oid/X.667-E.pdf}

@noindent
@emph{@dce{} 1.1: Remote Procedure Call}, appendix
@emph{Universally Unique Identifier}, Open Group Technical Standard
Document Number C706, August 1997, 737 pages, (supersedes C309
@dce{}: Remote Procedure Call 8/1994, which was basis for ISO/IEC
11578:1996 specification),
@url{http://www.opengroup.org/publications/catalog/c706.htm}.

@noindent
Information technology -- Open Systems Interconnection (OSI),
@emph{Remote Procedure Call (RPC)}, ISO/IEC 11578:1996, August 2001, 570
pages, (CHF 340,00), @url{http://www.iso.ch/cate/d2229.html}.

@noindent
Information technology -- Open Systems Interconnection (OSI),
@emph{Procedures for the operation of OSI Registration Authorities:
Generation and Registration of Universally Unique Identifiers (UUIDs)
and their Use as ASN.1 Object Identifier Components}, ISO/IEC
9834-8:2004 / ITU-T Rec. X.667, 2004, December 2004, 25 pages.

@noindent
@emph{HTTP Extensions for Distributed Authoring (WebDAV)}, section
@emph{6.4.1 Node Field Generation Without the IEEE 802 Address}, IETF
Request for Comments: RFC 2518, February 1999, 94 pages,
@url{http://www.ietf.org/rfc/rfc2518.txt}.

@noindent
@emph{@dce{} 1.1 compliant @uuid{} functions}, FreeBSD manual pages
@code{uuid(3)} and @code{uuidgen(2)},
@url{http://www.freebsd.org/cgi/man.cgi?query=uuid&manpath=FreeBSD+6.0-RELEASE}

@c page
@node uuid history
@appendixsec History


@ossp{} @uuid{} was implemented in January 2004 by Ralf S.  Engelschall
@email{rse@@engelschall.com}.  It was prompted by the use of @uuid{}s in
the @ossp{} @acronym{AS} and @emph{OpenPKG} projects.  It is a clean
room implementation intended to be strictly standards compliant and
maximum portable.

