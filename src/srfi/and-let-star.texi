@c page
@node srfi and-let-star
@appendixsec @ansrfi{2} @func{and-let*}: an @func{and} with local bindings, a guarded @func{let*} special form.


@cindex @srfi{} and-let-star


@noindent
The following library:

@example
(srfi and-let-star)
@end example

@noindent
is by Oleg Kiselyov as the reference implementation for @ansrfi{2}; see:

@center @url{http://srfi.schemers.org/srfi-2/srfi-2.html}

@noindent
for more details.  The following documentation is an unofficial Texinfo
reformatting and minor modification of the original document by Marco
Maggi @email{marcomaggi@@gna.org} (Fri Oct 24, 2008).

@menu
* srfi and-let-star license::           and-let-star document license.
* srfi and-let-star abstract::          Abstract.
* srfi and-let-star rationale::         Rationale.
* srfi and-let-star spec::              Specification.
@end menu

@c ------------------------------------------------------------

@c page
@node srfi and-let-star license
@appendixsubsec And-let-star document license


@noindent
Copyright @copyright{} 1998 Oleg Kiselyov.  All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
``Software''), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

@c ------------------------------------------------------------

@c page
@node srfi and-let-star abstract
@appendixsubsec Abstract


@noindent
Like an ordinary @func{and}, an @func{and-let*} special form evaluates
its arguments (expressions) one after another in order, till the first
one that yields @false{}.  Unlike @func{and}, however, a non--@false{}
result of one expression can be bound to a fresh variable and used in
the subsequent expressions.  @func{and-let*} is a cross--breed between
@func{let*} and @func{and}.


@c ------------------------------------------------------------

@c page
@node srfi and-let-star rationale
@appendixsubsec Rationale


@noindent
In case of an ordinary @func{and} formed of proper boolean expressions:

@example
(and e1 e2 ...)
@end example

@noindent
expression @var{e2}, if it gets to be evaluated, knows that @var{e1} has
returned non--@false{}.  Moreover, @var{e2} knows exactly what the
result of @var{e1} was (true) which @var{e2} can use to its advantage.
If @var{e1} however is an extended boolean expression, @var{e2} can no
longer tell which particular non--@false{} value @var{e1} has returned.
Chances are it took a lot of work to evaluate @var{e1}, and the produced
result (a number, a vector, a string, etc) may be of value to @var{e2}.
Alas, the @func{and} form merely checks that the result is not an
@false{}, and throws it away.  If @var{e2} needs it, it has to compute
that value anew.

This proposed @func{and-let*} special form lets constituent expressions
get hold of the results of already evaluated expressions, without
re--doing their work.

@func{and-let*} can be thought of as a combination of @func{let*} and
@func{and}, or a generalization of @func{cond}'s send operator,
@code{=>}.  An @func{and-let*} form can also be considered a sequence of
guarded expressions.

In a regular program, forms may produce results, bind them to variables
and let other forms use these results.  @func{and-let*} differs in that
it checks to make sure that every produced result ``makes sense'' (that
is, not an @false{}).  The first ``failure'' triggers the guard and
aborts the rest of the sequence (which presumably would not make any
sense to execute anyway).  Examples:

@example
(and-let* ([my-list     (compute-list)]
           [            (not (null? my-list))])
  (do-something my-list))

(define (look-up key alist)
  (and-let* ([x (assq key alist)])
    (cdr x)))

(or
  (and-let* ([c (read-char)]
             [  (not (eof-object? c))])
    (string-set! some-str i c)  
    (set! i (+ 1 i)))
  (begin
    (do-process-eof)))

;; A more realistic example
;; Parse the 'timestamp' ::= 'token1' 'token2'
;;   token1 ::= 'YY' 'MM' 'J'
;;   token2 ::= 'GG' 'gg' "/"
(define (parse-full-timestamp token1 token2)
  (and-let* ([  (= 5 (string-length token1))]
             [  (= 5 (string-length token2))]
             [timestamp
                (OS:string->time "%m/%d/%y %H:%M"
                  (string
                    (string-ref token1 2) (string-ref token1 3) #\/
                    (string-ref token1 0) (string-ref token1 1) #\/
                    (case (string-ref token1 4)
                      ((#\8 #\9) #\9) (else #\0))
                    (string-ref token1 4) #\space
                    (string-ref token2 0) (string-ref token2 1) #\:
                    (string-ref token2 2) (string-ref token2 3)))]
             [  (positive? timestamp)])
           timestamp))
@end example

@func{and-let*} is also similar to an ``anaphoric @func{and}'' Lisp
macro@footnote{Rob Warnock, comp.lang.scheme, 26 Feb 1998 09:06:43 GMT,
Message-ID: @url{6d3bb3$3804h@@fido.asd.sgi.com}}.  @func{and-let*}
allows however more than one intermediate result, each of which
continues to be bound through the rest of the form.


@c ------------------------------------------------------------

@c page
@node srfi and-let-star spec
@appendixsubsec Specification


@findex and-let*


@example
AND-LET* (CLAWS) BODY

CLAWS ::= '() | (cons CLAW CLAWS)
CLAW  ::=  (VARIABLE EXPRESSION) | (EXPRESSION) |
           BOUND-VARIABLE
@end example

@itemize
@item
The @code{CLAWS} are evaluated in the strict left--to--right order.

@item
For each @code{CLAW}, the @code{EXPRESSION} part is evaluated first (or
@code{BOUND-VARIABLE} is looked up)

@item
If the result is @false{}, @func{and-let*} immediately returns
@func{#f}.

@item
Otherwise, if the @code{claw} is of the form @code{(VARIABLE
EXPRESSION)} the @code{EXPRESSION}'s value is bound to a freshly made
@code{VARIABLE}.

@item
The @code{VARIABLE} is available for the rest of the @code{CLAWS}, and
the @code{BODY}.

@item
As usual, all @code{VARIABLE}s must be unique (like in @func{let*}).
@end itemize


@c ------------------------------------------------------------

@appendixsubsubsec Formal (denotational) semantics


@example
eval[ (AND-LET* (CLAW1 ...) BODY), env] =
   eval_claw[ CLAW1, env ] andalso
   eval[ (AND-LET* ( ...) BODY), ext_claw_env[CLAW1, env]]

eval[ (AND-LET* (CLAW) ), env] = eval_claw[ CLAW, env ]
eval[ (AND-LET* () FORM1 ...), env] = eval[ (BEGIN FORM1 ...), env ]
eval[ (AND-LET* () ), env] = #t

eval_claw[ BOUND-VARIABLE, env ] =
   eval[ BOUND-VARIABLE, env ]
eval_claw[ (EXPRESSION), env ] =
   eval[ EXPRESSION, env ]
eval_claw[ (VARIABLE EXPRESSION), env ] =
   eval[ EXPRESSION, env ]

ext_claw_env[ BOUND-VARIABLE, env ] = env
ext_claw_env[ (EXPRESSION), env ] =
   env-after-eval[ EXPRESSION, env ]
ext_claw_env[ (VARIABLE EXPRESSION), env ] =
   extend-env[ env-after-eval[ EXPRESSION, env ],
              VARIABLE boundto eval[ EXPRESSION, env ]]
@end example


@c ------------------------------------------------------------

